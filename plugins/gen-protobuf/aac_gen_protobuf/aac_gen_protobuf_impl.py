"""AaC Plugin implementation module for the aac-gen-protobuf plugin."""
# NOTE: It is safe to edit this file.
# This file is only initially generated by the aac gen-plugin, and it won't be overwritten if the file already exists.
from iteration_utilities import flatten

from aac import parser, template_engine, util

plugin_version = "0.0.1"


def gen_protobuf(architecture_file: str, output_directory: str):
    """
    Generate protobuf messages from Arch-as-Code models.

    Args:
        architecture_file <str>: TODO add a helpful parameter description
        output_directory <str>: TODO add a helpful parameter description
    """
    parsed_models = parser.parse_file(architecture_file)

    loaded_templates = template_engine.load_templates(__package__)

    data_messages = _collect_data_messages_from_behavior(parsed_models)
    message_template_properties = list(map(_generate_protobuf_details_from_data_message_model, data_messages.values()))
    generated_messages = _generate_protobuf_messages(loaded_templates, message_template_properties)

    print("!")
    print(generated_messages)


def _collect_data_messages_from_behavior(parsed_models: dict):

    def collect_behaviors(model_with_behaviors):
        return util.search(model_with_behaviors, ["model", "behavior"])

    def convert_behavior_io_to_data_type(behavior_io_model):
        return behavior_io_model.get("type")

    def collect_data_message_types(behavior_model):
        inputs = behavior_model.get("input") or []
        outputs = behavior_model.get("output") or []
        return list(map(convert_behavior_io_to_data_type, inputs + outputs))

    model_definitions = util.get_models_by_type(parsed_models, "model")
    behaviors = list(flatten(map(collect_behaviors, model_definitions.values())))
    data_message_types = set(flatten(map(collect_data_message_types, behaviors)))

    return {data_message_type: parsed_models[data_message_type] for data_message_type in data_message_types}


def _generate_protobuf_details_from_data_message_model(data_message_model) -> dict:
    """
    Produces a dict of protobuf template properties based on the data message model
    """
    message_name = data_message_model["data"]["name"]
    fields = data_message_model["data"]["fields"]

    message_fields = []
    for field in fields:
        # if "protobuf_type" not in field:
            # TODO: Sort this exception
            # raise GenerateProtobufException(f"{message_name} doesn't not specify a protobuf_type for the field {field}")

        field_name = field.get("name")
        field_type = field.get("protobuf_type") or field.get("type")
        message_fields.append({"name": field_name, "type": field_type })

    message_properties = {
        "name": message_name,
        "fields": message_fields
    }

    return message_properties



def _generate_protobuf_messages(protobuf_message_templates, properties) -> list:

    def generate_protobuf_message_from_template(properties) -> list:
        print(properties)
        return [{"name": properties.get("name"), "content": template_engine.generate_template(protobuf_template, properties)}]

    # This plugin produces only protobuf messages and one message per file
    protobuf_template = None
    if len(protobuf_message_templates) != 1:
        raise GenerateProtobufException(f"Unexpected number of templates loaded {len(protobuf_message_templates)}, \
                    expecting only protobuf message template. Loaded templates: {protobuf_message_templates}")
    else:
        protobuf_template = protobuf_message_templates[0]

    for property in properties:
        print(f"property: {property}")
        print(generate_protobuf_message_from_template(property))
    return list(flatten(map(generate_protobuf_message_from_template, properties)))


class GenerateProtobufException(Exception):
    """Exceptions specifically concerning protobuf message generation."""

    pass
