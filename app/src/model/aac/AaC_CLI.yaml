---
model:
  name: aac
  description: '''
  AaC is an architecture-as-code command line tool that allows an engineering team to capture representaitons of their
  system decomposition, system interfaces, system behaviors, and traceability within a configuration managable form.
  '''
  uses:
    - name: validator
      type: ArchValidator
  behavior:
    - name: validate
      type: command
      description:  ''' 
      The validate command reads a yaml file containing an architecture specification and ensures it is properly formed.
      If the model is properly formed the validate method returns true.
      If the model is improperly formed the validate method returns false and an error message.
      '''
      input: 
        - name: archFile
          type: file
      output:
        - name: isValid
          type: bool
        - name: errorMsg
          type: string
      acceptance:
        - scenario: Validate a correct architecture.
          given:
            - The validate command is selected.
            - The input.archFile contains a valid architecture specification.
          when:
            - Validation is performed.
          then:
            - The output.isValid output is true.
            - The output.errorMsg output is empty.
        - scenario: Validate an incorrect architecture.
          tags:
            - 'off-nominal'
          given:
            - The validate command is selected.
            - the input.archFile contains an invalid architecture specification.
          when:
            - Validation is performed.
          then:
            - The output.isValid output is false.
            - The output.errorMsg output contains details of the error.
    - name: json
      type: command
      description: '''
      The json command reads a yaml file containing an architecture specification, validates it using the validate command, 
      and if valid outputs a corresponding json representation.  If the input yaml is invlid, an error message is provided.
      '''
      input:
        - name: archFile
          type: file
      output:
        - name: json
          type: string
        - name: errorMsg
          type: string
      acceptance:
        - scenario: Output JSON for valid architecture.
          given:
            - The json command is selected.
            - The input.archFile contains a valid architecture specification.
          when:
            - JSON conversion is performed.
          then:
            - The output.json contains a JSON representation of the architecture specification.
            - The output.errorMsg is empty.
        - scenario: Output error for invalid architecture.
          tags: ["off-nominal"]
          given:
            - The json command is selected.
            - The input.archFile contains an invalid architecture specification.
          when:
            - JSON conversion is performed.
          then:
            - The output.json is empty.
            - The output.errorMsg contains details of the error.
    - name: puml
      type: command
      description: '''
      The puml command reads a yaml file containing an architecture specification, validates it using the validate command, 
      and if valid outputs a corresponding PlantUML representation.  If the input yaml is invlid, an error message is provided.
      '''
      input:
        - name: archFile
          type: file
      output:
        - name: puml
          type: string
        - name: errorMsg
          type: string
      acceptance:
        - scenario: Output PlantUML for valid architecture.
          given:
            - The puml command is selected.
            - The input.archFile contains a valid architecture specification.
          when:
            - PlantUML conversion is performed.
          then:
            - The output.puml contains a PlantUML representation of the architecture specification.
            - The output.errorMsg is empty.
        - scenario: Output error for invalid architecture.
          tags: ["off-nominal"]
          given:
            - The puml command is selected.
            - The input.archFile contains an invalid architecture specification.
          when:
            - PlantUML conversion is performed.
          then:
            - The output.puml is empty.
            - The output.errorMsg contains details of the error.
---
data:
  name: ParserResult
  fields:
    - name: models
      type: ModelMap[]
    - name: data
      type: DataMap[]
    - name: enums
      type: EnumMap[]
---
data:
  name: ModelMap
  fields:
    - name: name
      type: string
    - name: model
      type: model
---
data:
  name: DataMap
  fields:
    - name: name
      type: string
    - name: data
      type: data
---
data:
  name: EnumMap
  fields:
    - name: name
      type: string
    - name: enum
      type: enum
---
model: 
  name: ArchParser
  description: '''
  The parser reads a YAML file and provides back a model representing the contents of the YAML file.
  The parser does not inherently perform any validation.
  '''
  behavior:
    - name: parse
      type: request-response
      input:
        - name: archFile
          type: file
      output:
        - name: models
          type: model[]
        - name: data
          type: data[]
        - name: enums
          type: enum[]
        - name: errorMsg
          type: string
      acceptance:
        - scenario: Parse a valid YAML model.
          given:
            - The input.archFile is a valid YAML file containing a single model.
          when:
            - The parser is run.
          then:
            - The output.model is not empty.
            - The output.model contains a single entry.
            - The output.data is empty.
            - The output.errorMsg is empty.
        - scenario: Parse invalid YAML model.
          given:
            - The input.archFile is an invalid YAML file containing a single model.
          when:
            - The parser is run.
          then:
            - The output.model is empty.
            - The output.data is empty.
            - The output.errorMsg contains information about the error.
        - scenario: Parse a valid YAML data.
          given:
            - The input.archFile is a valid YAML file containing a single data.
          when:
            - The parser is run.
          then:
            - The output.model is empty.
            - The output.data is not empty.
            - The output.data contains a single entry.
            - The output.errorMsg is empty.
        - scenario: Parse invalid YAML data.
          given:
            - The input.archFile is an invalid YAML file containing a single data.
          when:
            - The parser is run.
          then:
            - The output.model is empty.
            - The output.data is empty.
            - The output.errorMsg contains information about the error.
        - scenario: Parse a valid YAML multi-entry model.
          given:
            - The input.archFile is a valid YAML file containing two models.
          when:
            - The parser is run.
          then:
            - The output.model is not empty.
            - The output.model contains two entries.
            - The output.data is empty.
            - The output.errorMsg is empty.
        - scenario: Parse a valid YAML multi-entry data.
          given:
             - The input.archFile is a valid YAML file containing two data.
          when:
            - The parser is run.
          then:
            - The output.model is empty.
            - The output.data contains two entries.
            - The output.data is empty.
            - The output.errorMsg is empty.
        - scenario: Parse a valid YAML multi-entry model and data.
          given:
            - The input.archFile is a valid YAML file containing one model and one data.
          when:
            - The parser is run.
          then:
            - The output.model is not empty.
            - The output.model contains one entry.
            - The output.data is not empty.
            - The output.data contains one entry.
            - The output.errorMsg is empty.
---
data:
  name: ValidationResult
  fields:
    - name: isValid
      type: bool
    - name: errors
      type: string[]
---
model: 
  name: ArchValidator
  description: '''
  The validator examines a model for correctness of form and content.
  '''
  uses:
    - name: parser
      type: ArchParser
  behavior:
    - name: validate
      type: request-response
      input:
        - name: model
          type: model
        - name: spec
          type: data[]
      output:
        - name: result
          type: ValidationResult
      acceptance:
        - scenario: Validate a good model.
          given:
            - The input.model is correct in form and content.
          when:
            - The validator is run.
          then:
            - The output.isValid is true.
            - The output.errorMsg is empty.
        - scenario: Validate a bad model.
          given:
            - The input.model is an invalid.
          when:
            - The validator is run.
          then:
            - The output.isValid is false.
            - The output.errorMsg contains information about the error.
          